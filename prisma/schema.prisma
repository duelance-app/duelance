generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String            @id @default(cuid())
    name          String
    email         String            @unique
    emailVerified DateTime?
    image         String?
    bio           String?
    status        String?
    userName      String            @unique
    socials       UserSocial[]
    accounts      Account[]
    sessions      Session[]
    tags          UserTag[]
    experience    UserExperience[]
    projects      UserProject[]
    skills        UserSkill[]
    education     UserEducation[]
    certificates  UserCertificate[]
    courses       UserCourse[]
    awards        UserAward[]
    publications  UserPublication[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserSocial {
    id         String @id @default(cuid())
    userId     String
    socialLink String
    user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model UserTag {
    id     String @id @default(cuid())
    userId String
    value  String
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model UserExperience {
    id          String    @id @default(cuid())
    userId      String
    title       String
    company     String?
    location    String?
    startDate   DateTime
    endDate     DateTime?
    current     Boolean?
    description String?   @db.Text
    User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model UserProject {
    id          String  @id @default(cuid())
    userId      String
    title       String
    description String? @db.Text
    link        String?
    User        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model UserSkill {
    id     String @id @default(cuid())
    userId String
    title  String
    level  String
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model UserEducation {
    id           String    @id @default(cuid())
    userId       String
    school       String
    degree       String?
    fieldOfStudy String?
    startDate    DateTime
    endDate      DateTime?
    current      Boolean?
    description  String?   @db.Text
    User         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model UserCertificate {
    id             String    @id @default(cuid())
    userId         String
    title          String
    certificateUrl String?
    licenseNumber  String?
    issuedDate     DateTime
    expiryDate     DateTime?
    description    String?   @db.Text
    User           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model UserCourse {
    id          String    @id @default(cuid())
    userId      String
    title       String
    courseUrl   String?
    startDate   DateTime
    endDate     DateTime?
    current     Boolean?
    description String?   @db.Text
    User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model UserAward {
    id          String   @id @default(cuid())
    userId      String
    title       String
    description String?  @db.Text
    awardDate   DateTime
    awardUrl    String?
    User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model UserPublication {
    id          String   @id @default(cuid())
    userId      String
    name        String
    publisher   String?
    releaseDate DateTime
    website     String?
    User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Follower {
    userId      String
    followerId  String
    followed_at DateTime

    @@id([userId, followerId])
}
