//**********************************************************************************************************
//* Copyright 2023 Duelance Inc. - All Rights Reserved
//* 
//* This file is part of the Duelance project.
//* 
//* Unauthorized copying, transferring or reproduction of this file, via any medium is strictly prohibited.
//* Proprietary and confidential.
//**********************************************************************************************************

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id             String               @id @default(cuid())
    name           String?
    userName       String?              @unique
    email          String               @unique
    emailVerified  DateTime?
    bio            String?
    image          String?
    status         String?
    socials        Social[]
    accounts       Account[]
    sessions       Session[]
    additionalData AdditionalUserData[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Followers {
    userId      String
    followerId  String
    followed_at DateTime

    @@id([userId, followerId])
}

model Social {
    id         String @id @default(cuid())
    userId     String
    socialLink String
    user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model AdditionalUserData {
    id              String            @id @default(cuid())
    userId          String
    experience      UserExperience[]
    projects        UserProject[]
    UserSkill       UserSkill[]
    UserEducation   UserEducation[]
    UserCertificate UserCertificate[]
    UserCourse      UserCourse[]
    UserAward       UserAward[]
    UserPublication UserPublication[]
    user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model UserExperience {
    id                   String             @id @default(cuid())
    additionalUserDataId String
    title                String
    company              String?
    location             String?
    startDate            DateTime
    endDate              DateTime?
    current              Boolean?
    description          String?
    additionalUserData   AdditionalUserData @relation(fields: [additionalUserDataId], references: [id], onDelete: Cascade)

    @@index([additionalUserDataId])
}

model UserProject {
    id                   String             @id @default(cuid())
    additionalUserDataId String
    title                String
    description          String?
    link                 String?
    additionalUserData   AdditionalUserData @relation(fields: [additionalUserDataId], references: [id], onDelete: Cascade)

    @@index([additionalUserDataId])
}

model UserSkill {
    id                   String             @id @default(cuid())
    additionalUserDataId String
    title                String
    level                String
    additionalUserData   AdditionalUserData @relation(fields: [additionalUserDataId], references: [id], onDelete: Cascade)

    @@index([additionalUserDataId])
}

model UserEducation {
    id                   String             @id @default(cuid())
    additionalUserDataId String
    school               String
    degree               String?
    fieldOfStudy         String?
    startDate            DateTime
    endDate              DateTime?
    current              Boolean?
    description          String?
    additionalUserData   AdditionalUserData @relation(fields: [additionalUserDataId], references: [id], onDelete: Cascade)

    @@index([additionalUserDataId])
}

model UserCertificate {
    id                   String             @id @default(cuid())
    additionalUserDataId String
    title                String
    certificateUrl       String?
    licenseNumber        String?
    startDate            DateTime
    endDate              DateTime?
    current              Boolean?
    description          String?
    additionalUserData   AdditionalUserData @relation(fields: [additionalUserDataId], references: [id], onDelete: Cascade)

    @@index([additionalUserDataId])
}

model UserCourse {
    id                   String             @id @default(cuid())
    additionalUserDataId String
    title                String
    courseUrl            String?
    startDate            DateTime
    endDate              DateTime?
    current              Boolean?
    description          String?
    additionalUserData   AdditionalUserData @relation(fields: [additionalUserDataId], references: [id], onDelete: Cascade)

    @@index([additionalUserDataId])
}

model UserAward {
    id                   String             @id @default(cuid())
    additionalUserDataId String
    title                String
    description          String?
    awardDate            DateTime
    awardUrl             String?
    additionalUserData   AdditionalUserData @relation(fields: [additionalUserDataId], references: [id], onDelete: Cascade)

    @@index([additionalUserDataId])
}

model UserPublication {
    id                   String             @id @default(cuid())
    additionalUserDataId String
    name                 String
    publisher            String?
    releaseDate          DateTime
    website              String?
    additionalUserData   AdditionalUserData @relation(fields: [additionalUserDataId], references: [id], onDelete: Cascade)

    @@index([additionalUserDataId])
}
